# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-01 14:31
from __future__ import unicode_literals

import core.models
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('email', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A short, descriptive name for the document', max_length=20)),
                ('uploaded', models.DateTimeField(auto_now_add=True)),
                ('document', models.FileField(upload_to=core.models.document_upload_path)),
                ('document_type', models.CharField(choices=[('E', 'EIA report'), ('G', 'Geographic data'), ('O', 'Other'), ('R', 'Raw data')], default='E', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentMake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FatalityData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('found', models.DateTimeField(help_text='Date<br>found')),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(help_text='The latitude and longitude values where the corpse was found', srid=4326)),
                ('cause_of_death', models.CharField(choices=[('T', 'Turbine'), ('R', 'Road'), ('S', 'Solar panel'), ('E', 'Power lines (electric)'), ('N', 'Natural'), ('P', 'Predation'), ('U', 'Undetermined')], help_text='Specify cause of death', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='FatalityRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Select the start of the period this estimate/rate is for (should be seasonal or yearly, in special cases can be month-by-month)')),
                ('end_date', models.DateField(help_text='Select the end of the period this estimate/rate is for (should be seasonal or yearly, in special cases can be month-by-month)')),
                ('rate', models.DecimalField(decimal_places=5, help_text='Enter your calculated rate, can be to 5 decimal places.', max_digits=8)),
                ('rate_type', models.CharField(choices=[('SC', 'Scavenger removal rate'), ('SE', 'Searcher efficiency rate'), ('FA', 'Calculated fatality rate (per year)')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='FocalSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', django.contrib.gis.db.models.fields.PolygonField(help_text='The area of the focal site, should be within 30km of the project area or it will not be associated with this project. <a href="#" onClick="startIntro()"  data-toggle="tooltip" data-placement="right" title="Click to learn how to use our maps">Learn how to use the map. You can load a KML or GPX, or draw a shape manually          <span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>.', srid=4326)),
                ('name', models.CharField(help_text='A name by which the focal site can be easily identified', max_length=50)),
                ('sensitive', models.BooleanField(default=False, help_text='If the focal site concerns sensitive species and should not be visible to the public, select this.')),
                ('activity', models.CharField(choices=[('R', 'Roost'), ('C', 'Display/courtship area'), ('F', 'Feeding ground'), ('O', 'Other'), ('N', 'N')], max_length=1)),
                ('habitat', models.CharField(choices=[('BU', 'Building'), ('BR', 'Bridge'), ('CA', 'Cave/ridge or underhanging'), ('CR', 'Rocky crevice'), ('CU', 'Culvert'), ('MI', 'Mine'), ('FT', 'Fruit trees'), ('TR', 'Trees'), ('CA', 'Cave/ridge or underhanging'), ('CL', 'Clearing'), ('SC', 'Grassy/shrubby area'), ('WA', 'Water body (e.g. pond, pool, etc)')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='FocalSiteData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observed', models.DateTimeField(help_text='Date<br>observed')),
                ('abundance', models.IntegerField(help_text='Absolute<br>abundance')),
                ('life_stage', models.CharField(choices=[('C', 'Chick/pup'), ('J', 'Juvenile'), ('A', 'Adult')], default='A', help_text='Life<br>stage', max_length=1)),
                ('activity', models.CharField(blank=True, choices=[('CDP', 'Courtship display'), ('CAN', 'Adult bird carrying nesting material'), ('ANB', 'Active nest building'), ('NCN', 'Newly completed nest'), ('NWE', 'Nest with eggs'), ('NWC', 'Nest with chicks'), ('PFY', 'Parents feeding young in nest'), ('PFS', 'Parents with fecal sac'), ('PAY', 'Parents and young not in nest'), ('NON', 'None')], help_text='Activity (only <br>applicable to birds)', max_length=3, null=True)),
                ('focal_site', models.ForeignKey(help_text='The focal site this dataset was recorded at', on_delete=django.db.models.deletion.CASCADE, to='core.FocalSite')),
            ],
        ),
        migrations.CreateModel(
            name='MetaData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flagged_for_query', models.BooleanField(default=False)),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PopulationData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observed', models.DateTimeField(help_text='Date<br>observed')),
                ('abundance', models.IntegerField(help_text='Count/<br>passes')),
                ('abundance_type', models.CharField(choices=[('R', 'Relative'), ('A', 'Absolute')], default='R', help_text='Abundance<br>type', max_length=1)),
                ('flight_height', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='Bird flight/Bat equipment<br>height range (m) Format: "x-y" - e.g. "0-1".', null=True)),
                ('location', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('hours', models.DecimalField(decimal_places=2, help_text='The number of hours spent doing the surveys', max_digits=5)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MetaData')),
            ],
        ),
        migrations.CreateModel(
            name='PreviousDeveloper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stopped', models.DateTimeField(auto_now_add=True)),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Developer')),
            ],
        ),
        migrations.CreateModel(
            name='PreviousProjectName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_name', models.CharField(max_length=50)),
                ('stopped', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('NG', 'NGO employee'), ('AC', 'Academic'), ('EI', 'EIA consultant'), ('PU', 'Member of the public'), ('BA', 'Bat specialist'), ('BI', 'Bird specialist'), ('DE', 'Developer'), ('OT', 'Other')], max_length=2)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The official name of the project', max_length=50, unique=True)),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('location', django.contrib.gis.db.models.fields.PolygonField(help_text='This should give users a rough idea of the study area. <a href="#" onClick="startIntro()"  data-toggle="tooltip" data-placement="right" title="Click to learn how to use our maps">Learn how to use the map. You can load a KML or GPX, or draw a shape manually          <span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>.', srid=4326)),
                ('eia_number', models.CharField(help_text='The official number provided by DEA', max_length=20)),
                ('energy_type', models.CharField(choices=[('W', 'Wind'), ('S', 'Solar')], default='W', help_text='The type of renewable energy', max_length=1)),
                ('operational_date', models.DateField(blank=True, help_text='The day on which building is complete (e.g. the turbines are revolving)', null=True)),
                ('construction_date', models.DateField(blank=True, help_text='The day on which construction starts', null=True)),
                ('turbine_locations', django.contrib.gis.db.models.fields.MultiPointField(blank=True, null=True, srid=4326)),
                ('capacity', models.DecimalField(blank=True, decimal_places=2, help_text='Nameplate capacity of the project', max_digits=6, null=True)),
                ('equipment_height', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('developer', models.ForeignKey(help_text='The company doing the development work on the project', on_delete=django.db.models.deletion.CASCADE, to='core.Developer')),
                ('equipment_make', models.ForeignKey(blank=True, help_text='The make and brand of the equipment', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.EquipmentMake')),
            ],
            options={
                'permissions': (('contributor', 'Can contribute data (i.e. upload datasets and create projects)'), ('trusted', 'Can view sensitive data'), ('request_contributor', 'Has requested contributor status'), ('request_trusted', 'Has requested trusted status')),
            },
        ),
        migrations.CreateModel(
            name='RemovalFlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Why should this dataset be removed?', max_length=2000)),
                ('requested_on', models.DateTimeField(auto_now_add=True, help_text='When the removal was requested')),
                ('metadata', models.ForeignKey(help_text='The dataset issued for removal', on_delete=django.db.models.deletion.CASCADE, to='core.MetaData')),
                ('requested_by', models.ForeignKey(help_text='The user who has requested the removal of this dataset', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_type', models.CharField(choices=[('W', 'Walked transect'), ('D', 'Driven transect'), ('V', 'Vantage point'), ('C', 'Census')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('name', models.CharField(max_length=100)),
                ('vernacular_name', models.CharField(blank=True, max_length=100, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_root', models.BooleanField(default=False)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank', models.CharField(choices=[('KI', 'Kingdom'), ('PH', 'Phylum'), ('CL', 'Class'), ('OR', 'Order'), ('FA', 'Family'), ('GE', 'Genus'), ('IN', 'Infraspecific name'), ('SP', 'Species'), ('SU', 'Subspecies')], default='SP', max_length=2)),
                ('red_list', models.CharField(blank=True, choices=[('EX', 'Extinct'), ('EW', 'Extinct in the Wild'), ('CR', 'Critically Endangered'), ('EN', 'Endangered'), ('VU', 'Vulnerable'), ('NT', 'Near Threatened'), ('LC', 'Least Concern'), ('DD', 'Data Deficient')], max_length=2, null=True)),
                ('sensitive', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.Taxon')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='previousprojectname',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project'),
        ),
        migrations.AddField(
            model_name='previousdeveloper',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project'),
        ),
        migrations.AddField(
            model_name='populationdata',
            name='survey_type',
            field=models.ManyToManyField(help_text='Type of survey(s) used during data collection', to='core.SurveyType'),
        ),
        migrations.AddField(
            model_name='populationdata',
            name='taxon',
            field=models.ForeignKey(help_text='Identify to genus or <br>species, or select Unknown', on_delete=django.db.models.deletion.CASCADE, to='core.Taxon'),
        ),
        migrations.AddField(
            model_name='metadata',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project'),
        ),
        migrations.AddField(
            model_name='metadata',
            name='uploader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='focalsitedata',
            name='metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MetaData'),
        ),
        migrations.AddField(
            model_name='focalsitedata',
            name='taxon',
            field=models.ForeignKey(help_text='Identify to genus or <br>species, or select Unknown', on_delete=django.db.models.deletion.CASCADE, to='core.Taxon'),
        ),
        migrations.AddField(
            model_name='fatalityrate',
            name='metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MetaData'),
        ),
        migrations.AddField(
            model_name='fatalityrate',
            name='taxon',
            field=models.ManyToManyField(help_text='Choose small, medium or large bird families, or Chiroptera for bats', to='core.Taxon'),
        ),
        migrations.AddField(
            model_name='fatalitydata',
            name='metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MetaData'),
        ),
        migrations.AddField(
            model_name='fatalitydata',
            name='taxon',
            field=models.ForeignKey(help_text='Identify to genus or <br>species, or select Unknown', on_delete=django.db.models.deletion.CASCADE, to='core.Taxon'),
        ),
        migrations.AddField(
            model_name='document',
            name='metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.MetaData'),
        ),
        migrations.AddField(
            model_name='document',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project'),
        ),
        migrations.AddField(
            model_name='document',
            name='uploader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
